package com.youle.gamebox.ui.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.youle.gamebox.ui.greendao.RecommendGame;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RECOMMEND_GAME.
*/
public class RecommendGameDao extends AbstractDao<RecommendGame, Long> {

    public static final String TABLENAME = "RECOMMEND_GAME";

    /**
     * Properties of entity RecommendGame.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Appid = new Property(0, Long.class, "appid", true, "APPID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Downloadurl = new Property(2, String.class, "downloadurl", false, "DOWNLOADURL");
        public final static Property Imageurl = new Property(3, String.class, "imageurl", false, "IMAGEURL");
        public final static Property Isrecommend = new Property(4, Boolean.class, "isrecommend", false, "ISRECOMMEND");
    };


    public RecommendGameDao(DaoConfig config) {
        super(config);
    }
    
    public RecommendGameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RECOMMEND_GAME' (" + //
                "'APPID' INTEGER PRIMARY KEY ," + // 0: appid
                "'NAME' TEXT," + // 1: name
                "'DOWNLOADURL' TEXT," + // 2: downloadurl
                "'IMAGEURL' TEXT," + // 3: imageurl
                "'ISRECOMMEND' INTEGER);"); // 4: isrecommend
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RECOMMEND_GAME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecommendGame entity) {
        stmt.clearBindings();
 
        Long appid = entity.getAppid();
        if (appid != null) {
            stmt.bindLong(1, appid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String downloadurl = entity.getDownloadurl();
        if (downloadurl != null) {
            stmt.bindString(3, downloadurl);
        }
 
        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(4, imageurl);
        }
 
        Boolean isrecommend = entity.getIsrecommend();
        if (isrecommend != null) {
            stmt.bindLong(5, isrecommend ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RecommendGame readEntity(Cursor cursor, int offset) {
        RecommendGame entity = new RecommendGame( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // appid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // downloadurl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageurl
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // isrecommend
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecommendGame entity, int offset) {
        entity.setAppid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDownloadurl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImageurl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsrecommend(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RecommendGame entity, long rowId) {
        entity.setAppid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RecommendGame entity) {
        if(entity != null) {
            return entity.getAppid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
