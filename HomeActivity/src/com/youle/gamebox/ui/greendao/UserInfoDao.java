package com.youle.gamebox.ui.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.youle.gamebox.ui.greendao.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_INFO.
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid = new Property(0, Long.class, "uid", true, "UID");
        public final static Property Sid = new Property(1, String.class, "sid", false, "SID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
        public final static Property Signature = new Property(4, String.class, "signature", false, "SIGNATURE");
        public final static Property Qq = new Property(5, String.class, "qq", false, "QQ");
        public final static Property Contact = new Property(6, String.class, "contact", false, "CONTACT");
        public final static Property BigAvatarUrl = new Property(7, String.class, "bigAvatarUrl", false, "BIG_AVATAR_URL");
        public final static Property SmallAvatarUrl = new Property(8, String.class, "smallAvatarUrl", false, "SMALL_AVATAR_URL");
        public final static Property LastLogin = new Property(9, Long.class, "lastLogin", false, "LAST_LOGIN");
        public final static Property IsSign = new Property(10, Boolean.class, "isSign", false, "IS_SIGN");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_INFO' (" + //
                "'UID' INTEGER PRIMARY KEY ," + // 0: uid
                "'SID' TEXT," + // 1: sid
                "'USER_NAME' TEXT," + // 2: userName
                "'NICK_NAME' TEXT," + // 3: nickName
                "'SIGNATURE' TEXT," + // 4: signature
                "'QQ' TEXT," + // 5: qq
                "'CONTACT' TEXT," + // 6: contact
                "'BIG_AVATAR_URL' TEXT," + // 7: bigAvatarUrl
                "'SMALL_AVATAR_URL' TEXT," + // 8: smallAvatarUrl
                "'LAST_LOGIN' INTEGER," + // 9: lastLogin
                "'IS_SIGN' INTEGER);"); // 10: isSign
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(2, sid);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(5, signature);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(6, qq);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(7, contact);
        }
 
        String bigAvatarUrl = entity.getBigAvatarUrl();
        if (bigAvatarUrl != null) {
            stmt.bindString(8, bigAvatarUrl);
        }
 
        String smallAvatarUrl = entity.getSmallAvatarUrl();
        if (smallAvatarUrl != null) {
            stmt.bindString(9, smallAvatarUrl);
        }
 
        Long lastLogin = entity.getLastLogin();
        if (lastLogin != null) {
            stmt.bindLong(10, lastLogin);
        }
 
        Boolean isSign = entity.getIsSign();
        if (isSign != null) {
            stmt.bindLong(11, isSign ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // signature
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // qq
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contact
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bigAvatarUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // smallAvatarUrl
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // lastLogin
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // isSign
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSignature(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQq(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContact(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBigAvatarUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSmallAvatarUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLastLogin(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setIsSign(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
