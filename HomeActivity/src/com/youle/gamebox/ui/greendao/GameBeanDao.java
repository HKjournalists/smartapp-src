package com.youle.gamebox.ui.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.youle.gamebox.ui.greendao.GameBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GAME_BEAN.
*/
public class GameBeanDao extends AbstractDao<GameBean, String> {

    public static final String TABLENAME = "GAME_BEAN";

    /**
     * Properties of entity GameBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property IconUrl = new Property(2, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Downloads = new Property(3, String.class, "downloads", false, "DOWNLOADS");
        public final static Property Size = new Property(4, String.class, "size", false, "SIZE");
        public final static Property PackageName = new Property(5, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Version = new Property(6, String.class, "version", false, "VERSION");
        public final static Property Explain = new Property(7, String.class, "explain", false, "EXPLAIN");
        public final static Property Category = new Property(8, String.class, "category", false, "CATEGORY");
        public final static Property DownloadUrl = new Property(9, String.class, "downloadUrl", true, "DOWNLOAD_URL");
        public final static Property DownloadPath = new Property(10, String.class, "downloadPath", false, "DOWNLOAD_PATH");
        public final static Property Score = new Property(11, Integer.class, "score", false, "SCORE");
        public final static Property Source = new Property(12, Integer.class, "source", false, "SOURCE");
        public final static Property Status = new Property(13, Integer.class, "status", false, "STATUS");
        public final static Property HasSpree = new Property(14, Boolean.class, "hasSpree", false, "HAS_SPREE");
        public final static Property DownloadStatus = new Property(15, Integer.class, "downloadStatus", false, "DOWNLOAD_STATUS");
        public final static Property TotalSize = new Property(16, Long.class, "totalSize", false, "TOTAL_SIZE");
        public final static Property CurrentSize = new Property(17, Long.class, "currentSize", false, "CURRENT_SIZE");
    };


    public GameBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GameBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GAME_BEAN' (" + //
                "'ID' INTEGER," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'ICON_URL' TEXT," + // 2: iconUrl
                "'DOWNLOADS' TEXT," + // 3: downloads
                "'SIZE' TEXT," + // 4: size
                "'PACKAGE_NAME' TEXT," + // 5: packageName
                "'VERSION' TEXT," + // 6: version
                "'EXPLAIN' TEXT," + // 7: explain
                "'CATEGORY' TEXT," + // 8: category
                "'DOWNLOAD_URL' TEXT PRIMARY KEY NOT NULL ," + // 9: downloadUrl
                "'DOWNLOAD_PATH' TEXT," + // 10: downloadPath
                "'SCORE' INTEGER," + // 11: score
                "'SOURCE' INTEGER," + // 12: source
                "'STATUS' INTEGER," + // 13: status
                "'HAS_SPREE' INTEGER," + // 14: hasSpree
                "'DOWNLOAD_STATUS' INTEGER," + // 15: downloadStatus
                "'TOTAL_SIZE' INTEGER," + // 16: totalSize
                "'CURRENT_SIZE' INTEGER);"); // 17: currentSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GAME_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GameBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(3, iconUrl);
        }
 
        String downloads = entity.getDownloads();
        if (downloads != null) {
            stmt.bindString(4, downloads);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(5, size);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(6, packageName);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(7, version);
        }
 
        String explain = entity.getExplain();
        if (explain != null) {
            stmt.bindString(8, explain);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(9, category);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(10, downloadUrl);
        }
 
        String downloadPath = entity.getDownloadPath();
        if (downloadPath != null) {
            stmt.bindString(11, downloadPath);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(12, score);
        }
 
        Integer source = entity.getSource();
        if (source != null) {
            stmt.bindLong(13, source);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(14, status);
        }
 
        Boolean hasSpree = entity.getHasSpree();
        if (hasSpree != null) {
            stmt.bindLong(15, hasSpree ? 1l: 0l);
        }
 
        Integer downloadStatus = entity.getDownloadStatus();
        if (downloadStatus != null) {
            stmt.bindLong(16, downloadStatus);
        }
 
        Long totalSize = entity.getTotalSize();
        if (totalSize != null) {
            stmt.bindLong(17, totalSize);
        }
 
        Long currentSize = entity.getCurrentSize();
        if (currentSize != null) {
            stmt.bindLong(18, currentSize);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9);
    }    

    /** @inheritdoc */
    @Override
    public GameBean readEntity(Cursor cursor, int offset) {
        GameBean entity = new GameBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // iconUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // downloads
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // size
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // packageName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // version
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // explain
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // category
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // downloadUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // downloadPath
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // score
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // source
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // status
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // hasSpree
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // downloadStatus
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // totalSize
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17) // currentSize
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GameBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIconUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDownloads(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSize(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPackageName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVersion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExplain(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCategory(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDownloadUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDownloadPath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setScore(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSource(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setStatus(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setHasSpree(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setDownloadStatus(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setTotalSize(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setCurrentSize(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GameBean entity, long rowId) {
        return entity.getDownloadUrl();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GameBean entity) {
        if(entity != null) {
            return entity.getDownloadUrl();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
