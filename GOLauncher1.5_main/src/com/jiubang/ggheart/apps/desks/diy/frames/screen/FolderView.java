/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jiubang.ggheart.apps.desks.diy.frames.screen;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Context;
import android.util.AttributeSet;
import android.view.HapticFeedbackConstants;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;

import com.gau.go.launcherex.R;
import com.jiubang.core.message.IMessageHandler;
import com.jiubang.core.message.IMsgType;
import com.jiubang.ggheart.apps.desks.diy.IDiyMsgIds;
import com.jiubang.ggheart.apps.desks.diy.LockScreenHandler;
import com.jiubang.ggheart.data.info.ScreenFolderInfo;
import com.jiubang.ggheart.data.info.ShortCutInfo;
import com.jiubang.ggheart.launcher.GOLauncherApp;

/**
 * Represents a set of icons chosen by the user or generated by the system.
 */
public class FolderView extends LinearLayout
		implements
			OnItemLongClickListener,
			OnItemClickListener,
			OnClickListener,
			View.OnLongClickListener {

	protected ListView mContent;

	protected Button mCloseButton;

	protected ScreenFolderInfo mInfo;

	/**
	 * Which item is being dragged
	 */
	protected ShortCutInfo mDragItem;

	protected IMessageHandler mMessageHandler;

	protected Activity mActivity;

	/**
	 * Used to inflate the Workspace from XML.
	 * 
	 * @param context
	 *            The application's context.
	 * @param attrs
	 *            The attribtues set containing the Workspace's customization
	 *            values.
	 */
	public FolderView(Context context, AttributeSet attrs) {
		super(context, attrs);
		setAlwaysDrawnWithCacheEnabled(false);
	}

	@Override
	protected void onFinishInflate() {
		super.onFinishInflate();

		mContent = (ListView) findViewById(R.id.folder_content);
		mContent.setOnItemClickListener(this);
		mContent.setOnItemLongClickListener(this);

		mCloseButton = (Button) findViewById(R.id.folder_close);
		mCloseButton.setOnClickListener(this);
		mCloseButton.setOnLongClickListener(this);
	}

	@SuppressWarnings("unchecked")
	@Override
	public void onItemClick(AdapterView parent, View v, int position, long id) {
		// ShortCutInfo shortcut =
		// (ShortCutInfo)parent.getItemAtPosition(position);
		// // set bound
		// if (v != null && shortcut != null && shortcut.mIntent != null)
		// {
		// final String action = shortcut.mIntent.getAction();
		// // TODO by luopeihuan 10-12-31 处理原生rom点击联系人快捷方式崩溃
		// // com.android.contacts.action.QUICK_CONTACT
		// if(action != null && action.contains("com.android.contacts"))
		// {
		// Rect targetRect = new Rect();
		// v.getGlobalVisibleRect(targetRect);
		// // TODO for what?
		// try
		// {
		// shortcut.mIntent.setSourceBounds(targetRect);
		// }
		// catch (NoSuchMethodError e)
		// {
		// }
		// }
		// }

		if (mMessageHandler != null) {
			// 启动程序
			mMessageHandler.handleMessage(this, IMsgType.SYNC, IDiyMsgIds.SCREEN_FOLDER_EVENT,
					IScreenFolder.START_ACTIVITY, v, null);

			// 关闭文件夹
			// mMessageHandler.handleMessage(MessageSender.TYPE_SYNC,
			// IDiyMsgIds.SCREEN_FOLDER_EVENT, IScreenFolder.CLOSE_FOLDER,
			// null, null);
		}
	}

	/**
	 * 设置消息处理器
	 * 
	 * @param messageHandler
	 *            消息处理器
	 */
	public void setMessageHandler(IMessageHandler messageHandler) {
		mMessageHandler = messageHandler;
	}

	/**
	 * 设置activity
	 * 
	 * @param activity
	 *            activity
	 */
	public void setActivity(Activity activity) {
		mActivity = activity;
	}

	@Override
	public void onClick(View v) {
		if (mMessageHandler != null) {
			// 关闭文件夹
			mMessageHandler.handleMessage(this, IMsgType.SYNC, IDiyMsgIds.SCREEN_FOLDER_EVENT,
					IScreenFolder.CLOSE_FOLDER, null, null);
		}
	}

	@Override
	public boolean onLongClick(View v) {
		// 判断当前是否锁屏
		if (GOLauncherApp.getSettingControler().getScreenSettingInfo().mLockScreen) {
			LockScreenHandler.showLockScreenNotification(getContext());
			return true;
		}

		if (mMessageHandler != null) {
			// 关闭文件夹
			mMessageHandler.handleMessage(this, IMsgType.SYNC, IDiyMsgIds.SCREEN_FOLDER_EVENT,
					IScreenFolder.LONG_PRESS_TITLE, null, null);
		}
		return true;
	}

	@Override
	public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
		// 判断当前是否锁屏
		if (GOLauncherApp.getSettingControler().getScreenSettingInfo().mLockScreen) {
			LockScreenHandler.showLockScreenNotification(getContext());
			return true;
		}

		// 添加震动
		view.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
				HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);

		if (!view.isInTouchMode()) {
			return false;
		}

		ShortCutInfo app = null;
		try {
			app = (ShortCutInfo) parent.getItemAtPosition(position);
		} catch (IndexOutOfBoundsException e) {
			return false;
		}

		if (mMessageHandler != null) {
			// 开始拖动图标
			ArrayList<ScreenFolderInfo> folderInfo = new ArrayList<ScreenFolderInfo>();
			folderInfo.add(mInfo);

			mMessageHandler.handleMessage(this, IMsgType.SYNC, IDiyMsgIds.SCREEN_FOLDER_EVENT,
					IScreenFolder.START_DRAG, view, folderInfo);

			// 关闭文件夹
			mMessageHandler.handleMessage(this, IMsgType.SYNC, IDiyMsgIds.SCREEN_FOLDER_EVENT,
					IScreenFolder.CLOSE_FOLDER, null, null);

			folderInfo.clear();
			folderInfo = null;
		}
		mDragItem = app;
		return true;
	}

	BaseAdapter getContentAdapter() {
		return (BaseAdapter) mContent.getAdapter();
	}

	/**
	 * Sets the adapter used to populate the content area. The adapter must only
	 * contains ApplicationInfo items.
	 * 
	 * @param adapter
	 *            The list of applications to display in the folder.
	 */
	void setContentAdapter(BaseAdapter adapter) {
		mContent.setAdapter(adapter);
	}

	void notifyDataSetChanged() {
		((BaseAdapter) mContent.getAdapter()).notifyDataSetChanged();
	}

	/**
	 * @return the FolderInfo object associated with this folder
	 */
	ScreenFolderInfo getInfo() {
		return mInfo;
	}

	// When the folder opens, we need to refresh the GridView's selection by
	// forcing a layout
	public void onOpen() {
		mContent.requestLayout();
	}

	void onClose() {
		mActivity = null;
	}

	public void bind(ScreenFolderInfo info) {
		mInfo = info;
		mCloseButton.setText(info.mTitle);
	}
}
